---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Values.hostname }}-cloud-init-job
  namespace: {{ .Values.namespace }}
spec:
  backoffLimit: 3
  template:
    spec:
      restartPolicy: Never
      serviceAccountName: cloud-init
      containers:
        - name: cloud-init
          image: deserializeme/kv-cloud-init:v0.0.0
          env:
 	  {{- range $reg, $props := .Values.users }}
          {{- if $props.password.existingSecret }}
          - name: {{ upper $props.name }}_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ $props.password.existingSecret.name }}
                key: {{ $props.password.existingSecret.key }}
	  {{- end }}
          {{- if $props.password.random }}
          - name: {{ upper $props.name }}_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ $props.name }}-password
                key: password
	  {{- end }}
	  {{- end }}
          {{- if .Values.envsubst }}
          - name: ENVSUBST
            value: true
 	  {{- range $reg, $props := .Values.envsubst }}
          - name: {{ $props.var }}
            value: {{ $props.value }}
	  {{- end }}
          {{- end }}
          command: ["/bin/bash", "-c"]
          args:
          - |
            export HASHED_PASSWORD=$(mkpasswd --method=SHA-512 --rounds=4096 $ADMIN_PASSWORD)
            cat /secrets/user-data.yaml |yq '.users[0].passwd = env(HASHED_PASSWORD)' > user-data.yaml
            kubectl create secret generic my-secret --from-file=user-data.yaml
            sleep 3650d
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: userdata
              mountPath: /secrets/user-data.yaml
              subPath: user-data.yaml
      volumes:
        - name: userdata
          configMap:
            name: {{ .Values.hostname }}-userdata
